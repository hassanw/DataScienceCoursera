set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
# Q1
#
# Suppose we compute PageRank with a Î² of 0.7, and we introduce the additional constraint that the sum of the PageRanks of the three pages must be 3, to handle the problem that otherwise any multiple of a solution will also be a solution. Compute the PageRanks a, b, and c of the three pages A, B, and C, respectively. Then, identify from the list below, the true statement.
#
# Matrix
#
#    A   B  C
# A  0   0  0
# B  0.5 0  0
# C  0.5 1  1
#
# Looking at columns.
# For node A, the user has 0 probability of moving to A, 0.5 of moving to B, 0.5 of moving to C.
#
b = 0.7
M = matrix(c(0, 0.5, 0.5, 0, 0, 1, 0, 0, 1), ncol=3)
e = matrix(c(1, 1, 1), ncol=1)
v1 = matrix(c(1, 1, 1), ncol=1)
v1 = v1 / 3
for (i in 1:5) {
v1 =  ((b * M ) %*% v1 ) + (((1 - b ) * e ) / 3)
}
v1 = v1 * 3
# Find values for a, b, c to match equations in possible answers.
a <- v1[1]
b <- v1[2]
c <- v1[3]
a
b
c
a+b
a+c
b+c
a+c
b = 0.85
M = matrix(c(0, 0.5, 0.5, 0, 0, 1, 1, 0, 0), ncol=3)
e = matrix(c(1, 1, 1), ncol=1)
v1 = matrix(c(1, 1, 1), ncol=1)
v1 = v1 / 3
for (i in 1:4) {
v1 =  ((b * M ) %*% v1 ) + (((1 - b ) * e ) / 3)
}
v1 = v1 * 3
# Find values for a, b, c to match equations in possible answers.
a <- v1[1]
b <- v1[2]
c <- v1[3]
# Determine which equation is true.
(85 * b) == (.575 * a) + (.15 * c)
(.95 * a) == (.9 * c) + (.05 * b)
b == (.475 * a) + (.05 * c)
c == b + (.575 * a)
b = 0.85
M = matrix(c(0, 0.5, 0.5, 0, 0, 1, 1, 0, 0), ncol=3)
e = matrix(c(1, 1, 1), ncol=1)
v1 = matrix(c(1, 1, 1), ncol=1)
v1 = v1 / 3
for (i in 1:4) {
v1 =  ((b * M ) %*% v1 ) + (((1 - b ) * e ) / 3)
}
v1 = v1 * 3
# Find values for a, b, c to match equations in possible answers.
a <- v1[1]
b <- v1[2]
c <- v1[3]
# Determine which equation is true.
(85 * b) == (.575 * a) + (.15 * c)
(.95 * a) == (.9 * c) + (.05 * b)
b == (.475 * a) + (.05 * c)
c == b + (.575 * a)
round(b, 3) == 5/8
round(a, 1) == 6/5
round(c, 3) == 11/8
round(b, 3) == 5/8
round(a, 1) == 6/5
round(c, 3) == 11/8
round(b, 3) == 5/8
round(a, 1) == 6/5
round(c, 3) == 11/8
library("lattice")
shingle("ABRACADABRA",2)
equal.count(ABRACADABRA)
equal.count("ABRACADABRA")
shingles("ABRACADABRA",interal=2)
shingle("ABRACADABRA",interval=2)
equal.count("ABRACADABRA")
equal.count("ABRACADABRA",2)
equal.count(8)
printDistance <- function(a,b) {
p1l1 = (a^2+ b^2)^(1/2)
p2l1 = ((100-a)^2 + (40-b)^2)^(1/2)
p1l2 = (a+b)
p2l2 = (100-a) + (40-b)
print(p1l1)
print(p2l1)
print(p1l2)
print(p2l2)
}
printDistance
printDistance(5,10)
printDistance(100,40)
power(N,2)
N = 20000
power(N,2)*2
N^2
N^2 * 2
N = 30000
N^2 * 2
N = 20000
N^2 * 2
N = 10000
N^2 * 2
N = 100000
N^2 * 2
N = 20000
N^2 * 2
N = 100000
N^2 * 2
N = 20000
N^2 * 2
N = 50000
N^2 * 2
N = 30000
N^2 * 2
N = 100000
N^2 * 2
N = 100000
N^2 * 2
N = 30000
N^2 * 2
N = 50000
N^2 * 2
N = 20000
N^2 * 2
N = 100000
N^2 * 2
N = 10000
N^2 * 2
2*(N^2)
N = 50000
2*(N^2)
N = 10000
2*(N^2)
u = matrix(1:3,ncol=1,nrow=3)
u
u = matrix([4,4,4],ncol=1,nrow=3)
1:12
u = matrix([4 4 4],ncol=1,nrow=3)
u = matrix(c(4,-4,-3),ncol=1,nrow=3)
u
transpose(u)
t(u)
v = matrix(c(4,2,4),ncol=1,nrow=3)
t(u) %% v
u
v
t(u) * v
t(u) %*% v
s = 'S'
s + 13
as.integer(s)
as.character(s)
a = ["a","b","c"]
a = c("a","b","c")
a
a = c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z")
a
a["f"]
where(a == "c")
which(a == c)
which(a == "c")
which(a == "c") + 13
a[16]
which(a == "a") + 13
a[14]
setwd("~/Documents/MOOC/Coursera/3. Exploratory Data Analysis/Quiz 1")
data = read.csv("ss06hid.csv");
colnames(data)
data["VAL"]
data["VAL",]
data["VAL"]
count(data["VAL"] == 24)
data["VAL"] == 20
sum(data["VAL"] == 20)
sum(data["VAL"] == 20,na.rm = ignore)
length(data["VAL"] == 20)
which(data["VAL"] == 20)
length(which(data["VAL"] == 20))
data["VAL"]
which(data$VAL==20 )
data["VAL,6475"]
data["VAL",6475]
data[6475,"VAL"]
data[which(data$VAL==20 ),"VAL"]
length(data[which(data$VAL==20 ),"VAL"])
length(data[which(data$VAL==24 ),"VAL"])
dat = read.xslx("DATA.gov_NGAP.xlsx");
library("xslx")
install("xslx")
install.packages("xslx")
install.packages("xslx")
library(openxlsx)
library(xslx)
install.packages(xslx)
library(openxlsx)
install.packages("xslx")
install.packages(openxslx)
install.packages("openxslx")
